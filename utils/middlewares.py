from typing import Any, Awaitable, Callable, Dict
from aiogram import BaseMiddleware
from aiogram.types import Update
from utils.config import limit_request, max_requests


class CountMiddleware(BaseMiddleware):
    """Middleware –ø–æ —Å—á—ë—Ç—É –∞–ø–¥–µ–π—Ç–æ–≤"""

    async def __call__(self, handler: Callable[[Update, Dict[str, Any]], Awaitable[Any]], event: Update, data: Dict[str, Any]) -> Any:
        
        if event.message:
            user_id = event.message.from_user.id
            username = event.message.from_user.full_name

        elif event.callback_query:
            user_id = event.callback_query.from_user.id
            username = event.callback_query.from_user.full_name

        if user_id in limit_request:
            limit_request[user_id]['count'] += 1
        else:
            limit_request[user_id] = {'count': 1, 'status': True}

            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ö–µ–Ω–¥–ª–µ—Ä–∞
        if limit_request[user_id]['count'] > max_requests:
            if limit_request[user_id]['status']:
                limit_request[user_id]['status'] = False
                text = f'''
‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï</b> ‚ö†Ô∏è

<b>–æ—Ç API Telegram</b>
<blockquote>–£–≤–∞–∂–∞–µ–º—ã–π, <b>{username}</b>‚ùóÔ∏è
–í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç –ø–æ –∑–∞–ø—Ä–æ—Å–∞–º üí≠
–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–∑–∂–µ ‚è≥
</blockquote>
'''
                await event.message.answer(
                    text=text
                )
            return
        
        await handler(event, data)
