from aiogram import Router, types as tp, F
from aiogram.fsm.context import FSMContext
from datetime import datetime as dt
from utils.states import GiftState
from utils.loader_token import Token
from functions.sqlite_work import BD
from main_logic_bot.vishlist import kb_vishlist as kb

router = Router(name='message_vishlist_funnel')


async def check_text(message: tp.Message) -> bool | None:
    """–§—É–Ω–∫—Ü–∏—è –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞–ª–∏—á–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏"""

    if not message.text:
        await message.answer(
            text='–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤ –≤–∞—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ üòí',
            reply_markup=kb.reply.cancel
        )
        return True
    

async def check_content(message: tp.Message, state: FSMContext) -> bool | None:
    """–§—É–Ω–∫—Ü–∏—è –≤—Å—Ç—Ä–µ—á–∞–µ—Ç –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–æ –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±—â–µ–Ω–∏–µ —Å ChatGPT"""

    text = f'''
–°–æ–∑–¥–∞–Ω–∏–µ –∂–µ–ª–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ ‚ùóÔ∏è
'''
    
    if message.text == '–ó–∞–≤–µ—Ä—à–∏—Ç—å ‚úã':
        await message.answer(
            text=text,
            reply_markup=kb.reply.remove
        )

        await state.clear()
        return True


@router.callback_query(F.data == 'create_gift')
async def callback_create_gift_vishlist(callback_query: tp.CallbackQuery, state: FSMContext) -> None:
    """–§—É–Ω–∫—Ü–∏—è –ø–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã callback_data = create_gift"""

    text = f'''
–•–æ—Ä–æ—à–æ, –Ω–∞—á–Ω—ë–º ‚ò∫Ô∏è
–ö–∞–∫ –±—É–¥–µ—Ç –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è —Ç–≤–æ—ë –∂–µ–ª–∞–Ω–∏–µ? üåü
'''
    await state.clear()
    await callback_query.answer()
    await callback_query.message.answer(
        text=text,
        reply_markup=kb.reply.cancel
    )
    await state.set_state(GiftState.title)


@router.message(GiftState.title)
async def get_title(message: tp.Message, state: FSMContext) -> None:
    """–§—É–Ω–∫—Ü–∏—è –ø–æ –ø–æ–ª—É—á–µ–Ω–∏—é –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –∂–µ–ª–∞–Ω–∏—è"""

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    if await check_text(message=message): return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—â–µ–Ω–∏—è
    if await check_content(message=message, state=state): return

    await state.update_data(title=message.text)

    text = f'''
<b>"{message.text}"</b> - –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ üåü
–ß—Ç–æ –∂, —Ç–µ–ø–µ—Ä—å –º–Ω–µ –Ω–µ–æ—Ö–æ–¥–∏–º–æ —á—Ç–æ–±—ã —Ç—ã –Ω–∞–ø–∏—Å–∞–ª(–∞) –ø–æ—Å–ª–∞–Ω–∏–µ –¥–ª—è —Å–≤–æ–µ–π –≤—Ç–æ—Ä–æ–π –ø–æ–ª–æ–≤–∏–Ω–∫–∏ üíå
'''

    await message.answer(
            text=text,
            reply_markup=kb.reply.cancel
        )
    await state.set_state(GiftState.description)


@router.message(GiftState.description)
async def get_description(message: tp.Message, state: FSMContext) -> None:
    """–§—É–Ω–∫—Ü–∏—è –ø–æ –ø–æ–ª—É—á–µ–Ω–∏—é –ø–æ—Å–ª–∞–Ω–∏—è"""

       # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    if await check_text(message=message): return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—â–µ–Ω–∏—è
    if await check_content(message=message, state=state): return

    await state.update_data(description=message.text)

    text = f'''
–ú–º–º, –∫–∞–∫–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ üòç
–ì–ª–∞–≤–Ω–æ–µ —á—Ç–æ–±—ã –ø–æ—Å–ª–µ —Ç–∞–∫–æ–≥–æ –≤—Å–µ –±—ã–ª–∏ —Å—á–∞—Å—Ç–ª–∏–≤–∏ –∏ –Ω–∏–∫—Ç–æ –Ω–µ —É–ø–∞–ª –≤ –æ–±–º–æ—Ä–æ–∫ ‚ò†Ô∏è

–ò –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥, —è —Ö–æ—á—É –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –¥–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä üîó
'''
    
    await message.answer(
            text=text,
            reply_markup=kb.reply.cancel
        )
    await state.set_state(GiftState.link)


@router.message(GiftState.link)
async def get_link(message: tp.Message, state: FSMContext) -> None:
    """–§—É–Ω–∫—Ü–∏—è –ø–æ –ø–æ–ª—É—á–µ–Ω–∏—é —Å—Å—ã–ª–∫–∏"""

       # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    if await check_text(message=message): return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—â–µ–Ω–∏—è
    if await check_content(message=message, state=state): return

    if 'https://' not in message.text:
        await message.answer(
            text='–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É ‚ùå',
            reply_markup=kb.reply.cancel
        )
        return

    await state.update_data(link=message.text)

    data: dict = await state.get_data()
    title = data.get('title')
    description = data.get('description')
    link = data.get('link')

    text = f'''
–í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã ‚úÖ
–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –¥–∞–Ω–Ω–æ–µ –∂–µ–ª–∞–Ω–∏–µ? üßê
‚¨áÔ∏è-‚¨áÔ∏è-‚¨áÔ∏è-‚¨áÔ∏è-‚¨áÔ∏è-‚¨áÔ∏è-‚¨áÔ∏è-‚¨áÔ∏è-‚¨áÔ∏è

–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ üåü: <b>"{title}"</b>

–ü–æ—Å–ª–∞–Ω–∏–µ üíå: <i>"{description}"</i>

<b><a href='{link}'>–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä üîó</a></b>
'''
    
    await message.answer(
            text=text,
            reply_markup=kb.reply.yes_no
        )
    await state.set_state(GiftState.status)


@router.message(GiftState.status)
async def get_status(message: tp.Message, state: FSMContext) -> None:
    """–§—É–Ω–∫—Ü–∏—è –ø–æ –ø–æ–ª—É—á–µ–Ω–∏—é –ø–æ—Å–ª–∞–Ω–∏—è"""

       # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    if await check_text(message=message): return

    if message.text not in ['–î–∞ ‚úÖ', '–ù–µ—Ç ‚ùå']:
        await message.answer(
            text='–ú–Ω–µ –Ω—É–∂–µ–Ω –æ—Ç–≤–µ—Ç <b>"–î–∞ ‚úÖ</b> –∏–ª–∏ <b>"–ù–µ—Ç ‚ùå</b>',
        )
        return
    
    if  message.text == '–ù–µ—Ç ‚ùå':
        await state.clear()
        await message.answer(
            text='–û—á–µ–Ω—å –∂–∞–ª—å, —Ç–∞–∫–æ–µ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ –∂–µ–ª–∞–Ω–∏–µ –±—ã–ª–æ...',
            reply_markup=kb.reply.remove
        )
        return

    text = f'''
–ñ–µ–ª–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ! ‚úÖ
–ù–∞–¥–µ—é—Å—å –≤–∞—à–∞ –≤—Ç–æ—Ä–∞—è –ø–æ–ª–æ–≤–∏–Ω–∫–∞ –≤–∞–º —Å–∫–æ—Ä–æ –µ–≥–æ –ø–æ–¥–∞—Ä–∏—Ç! ‚ò∫Ô∏è
'''
    
    await message.answer(
            text=text,
            reply_markup=kb.reply.remove
        )
    
    await save_gift(message=message, state=state)


async def save_gift(message: tp.Message, state: FSMContext) -> None:
    """–§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∂–µ–ª–∞–Ω–∏–µ –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥"""

    data: dict = await state.get_data()
    title = data.get('title')
    description = data.get('description')
    link = data.get('link')
    
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –ë–î
    client_bd = BD(path='gift.sqlite3')
    await client_bd.add_gift(
        user_id=message.from_user.id,
        title=title,
        description=description,
        link=link,
        datetime=dt.now().strftime(r"%d.%m.%Y, %H:%M:%S")
    )

    await state.clear()

    await mail(message=message, title=title)


async def mail(message: tp.Message, title: str) -> None:
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–π –ø–æ–ª–æ–≤–∏–Ω–∫–∏"""

    if message.from_user.id == int(Token(key='HIS_ID').find()):
        half_id = Token(key='HER_ID').find()
    else:
        half_id = Token(key='HIS_ID').find()

    await message.bot.send_message(
        chat_id=half_id,
        text=f'–í–∞—à–∞ –≤—Ç–æ—Ä–∞—è –ø–æ–ª–æ–≤–∏–Ω–∫–∞ —Å–æ–∑–¥–∞–ª–∞ –Ω–æ–≤–æ–µ –∂–µ–ª–∞–Ω–∏–µ: <b>"{title}"</b>\n–°–∫–æ—Ä–µ–µ —É–∑–Ω–∞–π—Ç–µ –æ –Ω—ë–º –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ ü§©'
    )
