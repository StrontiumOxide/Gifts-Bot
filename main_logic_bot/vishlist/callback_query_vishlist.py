from aiogram import Router, types as tp, F
from main_logic_bot.vishlist import kb_vishlist as kb
from utils.loader_token import Token
from functions.sqlite_work import BD

router = Router(name='callback_query_vishlist')


@router.callback_query(F.data == 'my')
async def callback_my_vishlist(callback_query: tp.CallbackQuery) -> None:
    """–§—É–Ω–∫—Ü–∏—è –ø–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã callback_data = my"""

    text = f'''
–ó–¥–µ—Å—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤—Å–µ —Ç–≤–æ–∏ —Ö–æ—Ç–µ–ª–∫–∏ –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è. üåü 

–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –≤—ã–±–µ—Ä–∏ –∂–µ–ª–∞–Ω–∏–µ. üìñ 

–¢–∞–∫–∂–µ –∑–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é –Ω–æ–≤—É—é —Ö–æ—Ç–µ–ª–∫—É. ‚ú®
'''

    await callback_query.message.edit_text(
        text=text,
        reply_markup= await kb.inline.create_list_gifts(user_id=callback_query.from_user.id, slice=0)
    )


@router.callback_query(F.data == 'strange')
async def callback_strange_vishlist(callback_query: tp.CallbackQuery) -> None:
    """–§—É–Ω–∫—Ü–∏—è –ø–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã callback_data = strange"""

    if callback_query.from_user.id == int(Token(key='HIS_ID').find()):
        user_id = Token(key='HER_ID').find()
    else:
        user_id = Token(key='HIS_ID').find()


    text = f'''
–ê –∑–¥–µ—Å—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –∂–µ–ª–∞–Ω–∏—è —Ç–≤–æ–µ–π –≤—Ç–æ—Ä–æ–π –ø–æ–ª–æ–≤–∏–Ω–∫–∏. üéÅ

–ò–∑–º–µ–Ω—è—Ç—å –∏—Ö —Ç—ã –Ω–µ —Å–º–æ–∂–µ—à—å üòî

–ó–∞–≥–ª—è–Ω–∏ —Å–∫–æ—Ä–µ–µ –≤–Ω—É—Ç—Ä—å –∏ —Å–¥–µ–ª–∞–π –ø–æ–¥–∞—Ä–æ–∫ –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ! üéÄ‚ú®
'''

    await callback_query.message.edit_text(
        text=text,
        reply_markup= await kb.inline.create_list_gifts(user_id=int(user_id), slice=1)
    )


@router.callback_query(lambda call: 'gift_id' in call.data)
async def callback_in_gift_id(callback_query: tp.CallbackQuery) -> None:
    """–§—É–Ω–∫—Ü–∏—è –ø–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—é –∂–µ–ª–∞–Ω–∏—è"""

    gift_id = int(callback_query.data.split(sep='_')[-1])
    data = await BD(path='gift.sqlite3').get_gift(gift_id=gift_id)
    data = data[0]

    text = f'''
<b>[{data[5]}]</b>

–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ üåü: <b>"{data[2]}"</b>

–ü–æ—Å–ª–∞–Ω–∏–µ üíå: <i>"{data[3]}"</i>

<b><a href='{data[4]}'>–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä üîó</a></b>
'''
    
    if data[1] == callback_query.from_user.id:
        status = True
    else:
        status = False

    await callback_query.message.edit_text(
        text=text,
        reply_markup=kb.inline.create_kb_for_delete(gift_id=int(data[0]), permission_delete=status)
    )
    

@router.callback_query(lambda call: 'delete_gift' in call.data)
async def callback_in_delete_gift(callback_query: tp.CallbackQuery) -> None:
    """–§—É–Ω–∫—Ü–∏—è –ø–æ —É—Ç–æ—á–Ω–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∂–µ–ª–∞–Ω–∏—è"""

    gift_id = int(callback_query.data.split(sep='_')[-1])
    data = await BD(path='gift.sqlite3').get_gift(gift_id=gift_id)
    data = data[0]

    text = f'''
–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∂–µ–ª–∞–Ω–∏–µ: <b>"{data[2]}"</b>?
'''
    
    await callback_query.message.edit_text(
        text=text,
        reply_markup=kb.inline.create_delete(gift_id=gift_id)
    )


@router.callback_query(lambda call: 'yes_delete' in call.data)
async def callback_in_delete_gift(callback_query: tp.CallbackQuery) -> None:
    """–§—É–Ω–∫—Ü–∏—è –ø–æ —É–¥–∞–ª–µ–Ω–∏—é –∂–µ–ª–∞–Ω–∏—è"""

    gift_id = int(callback_query.data.split(sep='_')[-1])
    await BD(path='gift.sqlite3').delete_gift(gift_id=gift_id)
    
    await callback_query.answer(
        text='–ñ–µ–ª–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ',
        show_alert=True
    )

    text = f'''
–ó–¥–µ—Å—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤—Å–µ —Ç–≤–æ–∏ —Ö–æ—Ç–µ–ª–∫–∏ –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è. üåü 

–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –≤—ã–±–µ—Ä–∏ –∂–µ–ª–∞–Ω–∏–µ. üìñ 

–¢–∞–∫–∂–µ –∑–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é –Ω–æ–≤—É—é —Ö–æ—Ç–µ–ª–∫—É. ‚ú®
'''
    
    await callback_query.message.edit_text(
        text=text,
        reply_markup= await kb.inline.create_list_gifts(user_id=callback_query.from_user.id, slice=0)
    )


@router.callback_query(F.data == 'back')
async def callback_back_vishlist(callback_query: tp.CallbackQuery) -> None:
    """–§—É–Ω–∫—Ü–∏—è –ø–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã callback_data = back"""

    text = f'''
–ò—Ç–∞–∫, —á—Ç–æ —Ç—ã —Å–æ–±–∏—Ä–∞–µ—à—å—Å—è —Å–¥–µ–ª–∞—Ç—å? üßê

–£–∑–Ω–∞—Ç—å, —á—Ç–æ —Ö–æ—á–µ—Ç —Ç–≤–æ—è –ø–æ–ª–æ–≤–∏–Ω–∫–∞? üëÄ  
–ò–ª–∏, –≤–æ–∑–º–æ–∂–Ω–æ, –≤—Å–ø–æ–º–Ω–∏—Ç—å, —á—Ç–æ —É–∂–µ –µ—Å—Ç—å –≤ —Ç–≤–æ—ë–º –≤–∏—à-–ª–∏—Å—Ç–µ? üòâ

–ù–µ –∑–∞–±—ã–≤–∞–π: —Ç—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –ª–∏—à–Ω–µ–µ! üåü
'''
    
    await callback_query.message.edit_text(
        text=text,
        reply_markup= kb.inline.create_select_vish(user_id=callback_query.from_user.id)
    )
